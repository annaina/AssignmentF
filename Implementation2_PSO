%% HYBRID INTELLIGENT SYSTEM - PSO TUNING OF FIS

%% 1. Load and preprocess data
data = readtable('auto-mpg.csv', 'VariableNamingRule', 'preserve');
data = rmmissing(data);

% Select inputs and output
inputs = data{:, {'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration'}};
output = data{:, 'mpg'};

% Normalize
inputs = rescale(inputs);
output = rescale(output);

% Split into training and testing sets
n = size(inputs, 1);
idx = randperm(n);
split = round(0.7 * n);

X_train = inputs(idx(1:split), :);
Y_train = output(idx(1:split), :);
X_test = inputs(idx(split+1:end), :);
Y_test = output(idx(split+1:end), :);

%% 2. Generate initial FIS using subtractive clustering
fis = genfis2(X_train, Y_train, 0.5); % Radius controls rule count

%% 3. Extract tunable parameters
[params, info] = getTunableSettings(fis);
initial_values = getTunableValues(fis, params);
nVars = numel(initial_values);

%% 4. PSO configuration
nParticles = 30;
nIterations = 100;
inertia = 0.7;
c1 = 1.5;
c2 = 1.5;

positions = repmat(initial_values, nParticles, 1) + 0.05 * randn(nParticles, nVars);
velocities = zeros(nParticles, nVars);
personal_best = positions;
personal_best_scores = inf(nParticles, 1);
global_best = initial_values;
global_best_score = inf;

% Safe wrapper to avoid invalid Gaussian parameters
cost_func = @(x) mean((evalfis(safeSet(fis, params, x), X_train) - Y_train).^2);

% Evaluate initial positions
for i = 1:nParticles
    score = cost_func(positions(i, :));
    personal_best_scores(i) = score;
    if score < global_best_score
        global_best = positions(i, :);
        global_best_score = score;
    end
end

%% 5. PSO main loop
for iter = 1:nIterations
    for i = 1:nParticles
        r1 = rand(1, nVars);
        r2 = rand(1, nVars);
        velocities(i,:) = inertia * velocities(i,:) ...
            + c1 * r1 .* (personal_best(i,:) - positions(i,:)) ...
            + c2 * r2 .* (global_best - positions(i,:));
        positions(i,:) = positions(i,:) + velocities(i,:);

        % Evaluate new position
        score = cost_func(positions(i,:));
        if score < personal_best_scores(i)
            personal_best(i,:) = positions(i,:);
            personal_best_scores(i) = score;
            if score < global_best_score
                global_best = positions(i,:);
                global_best_score = score;
            end
        end
    end

    if mod(iter,10)==0 || iter==1
        fprintf("Iteration %3d - Best MSE: %.6f\n", iter, global_best_score);
    end
end

%% 6. Apply best solution and evaluate
fis_pso = safeSet(fis, params, global_best);
Y_pred = evalfis(fis_pso, X_test);
mse_pso = mean((Y_pred - Y_test).^2);
rmse_pso = sqrt(mse_pso);

fprintf("\nPSO-Tuned FIS MSE: %.4f\n", mse_pso);
fprintf("PSO-Tuned FIS RMSE: %.4f\n", rmse_pso);

%% 7. Plot results
figure;
plot(Y_test, 'b-o', 'DisplayName', 'Actual Output');
hold on;
plot(Y_pred, 'r-x', 'DisplayName', 'PSO-Tuned FIS Output');
legend('Location', 'best');
xlabel('Sample Index'); ylabel('Rescaled MPG');
title('PSO-Tuned FIS Performance');
grid on;

%% 8. Helper function for safe parameter assignment
function fis_out = safeSet(fis_in, params, x)
    x(x <= 0) = 0.05; % Ensure positive sigma values
    fis_out = setTunableValues(fis_in, params, x);
end
